#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug 29 10:56:49 2019

@author: vite

Based on main4_raw, Starter Pack, Guillaume Viejo
"""


"""
This script will show you how to load the various data you need

The function are already written in the file wrappers.py that should be in the same directory as this script

To speed up loading of the data, a folder called /Analysis will be created and some data will be saved here
So that next time, you load the script, the wrappers will search in /Analysis to load faster
"""
import os
import numpy as np
import pandas as pd
import neuroseries as nts
#from pylab import *
import matplotlib.pyplot as plt

"""
A. LOAD DATA
"""

# first we define a string for the data directory
# It is usually better to separate the data from the code
rootDir = '/media/3TBHDD/'
ID = 'A3302'
session = 'A3302-190819'
data_directory = rootDir + '/' + ID + '/' + session + '/' + session
#data_directory = '/home/grvite/Data/A3301/A3301-190611r'
# The two dots means we go backward in the folder architecture and then into the data folder

# To list the files in the directory, you use the os package (for Operating System) and the listdir function
import os
files = os.listdir(data_directory) 

# First thing to load are the spikes.
# Here you can use the wrappers loadSpikeData
from wrappers import loadSpikeData
spikes, shank = loadSpikeData(data_directory)

# Second thing is some information about the recording session like the geometry of the shanks and sampling frequency
# You can use the loadXML wrapper
from wrappers import loadXML
n_channels, fs, shank_to_channel = loadXML(data_directory)

# Now we want to load the position of the animal
# In the data folder, observe that you have a file called Epoch_TS.csv which contains the start and end of the different epoch
# This file is automatically generated by the kilosort preprocessing pipeline
# One thing to know is what was the structure of the recording day
# In this case, sleep alternate with wake
# So you define the episode keys and the index of the events for wake

episodes = ['wake']
events = ['0']

# Now we can load the position and rotation contained into the file Tracking_data.csv
# The order is by default [rotation y, rotation x, rotation z, position x, position y, position z] 
from wrappers import loadPosition
position = loadPosition(data_directory, events, episodes, n_ttl_channels = 1, optitrack_ch = 0)
# The loadPosition is doing of lot of stuff in the background
# in particular it's making a BehavEpoch.h5 in the folder analysis
# It contains the start and end of all the epochs
# plus it's automatically realigning the start and end of the wake epoch to the start and end of the tracking
# But now, you can load the different epoch 



from wrappers import loadEpoch
wake_ep                             = loadEpoch(data_directory, 'wake', episodes)
#sleep_ep                             = loadEpoch(data_directory, 'sleep')                    


#
from functions import computeAngularTuningCurves
tuning_curves = computeAngularTuningCurves(spikes, position['ry'], wake_ep, 60)
from functions import smoothAngularTuningCurves
tuning_curves = smoothAngularTuningCurves(tuning_curves, 10, 2)

#
#Create plots directory
os.mkdir(data_directory+'/plots')
#Determine the number of raws
raws = round(len(spikes)/5)

plt.figure(figsize=(20,100))
for i, n in enumerate(tuning_curves.columns):
    plt.subplot(5,raws,i+1, projection = 'polar')
    plt.plot(tuning_curves[n], color = 'darkorange')
    plt.title('Neuron' + ' ' + str(i) , loc ='center')
plt.subplots_adjust(wspace=0.4, hspace=1, top = 0.9)
plt.show()
plt.savefig(data + '/plots')











