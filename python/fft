#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Mar 30 18:29:28 2020

@author: vite
"""
#KEi
#directory = '/Users/vite/navigation_system/Data_Kei'
#data=pd.read_csv(directory+"/data.csv",index_col=0)
#data=data.values

import numpy as np
import matplotlib.pyplot
from math import pi, sqrt, exp
from functions import *
import neuroseries as nts

desirefreq=20 #Hz
binsize=((1/desirefreq)/10)*1000
sigma=2
cutoff= 1000/binsize/(2*np.pi*sigma)

def gauss(n=500000,sigma=sigma):
    r = np.linspace(-int(n/2)+0.5,int(n/2)-0.5, n)
    return [1 / (sigma * sqrt(2*pi)) * exp(-float(x)**2/(2*sigma**2)) for x in r]

#load your spike data
data=spikes[0].as_units('ms').index.values

# Preproc with convolution
bins = np.linspace(data.min(),data.max(),(data.max()-data.min())/binsize)
hist, edges = np.histogram(
    data,
    bins=bins,
    density=False)

kernel =  gauss()

from scipy.signal import convolve
signal=convolve(hist,kernel)

figure()
plot(signal)

#Preproc with autocorr

neuron_0 = spikes[11].restrict(wake_ep)

# transforming the times in millisecond
neuron_0 = neuron_0.as_units('ms')
# and extracting the index to feed the function crossCorr
neuron_0_t = neuron_0.index.values

# Let's say you want to compute the autocorr with 5 ms bins
binsize = 5
# with 200 bins
nbins = 400

# Now we can call the function crossCorr
from functions import crossCorr
autocorr_0 = crossCorr(neuron_0_t, neuron_0_t, binsize, nbins)

# The corresponding times can be computed as follow 
times = np.arange(0, binsize*(nbins+1), binsize) - (nbins*binsize)/2

# Let's make a Tsd
autocorr_0 = pd.DataFrame(index = times, data = autocorr_0)

# We need to replace the value at 0
autocorr_0.loc[0] = 0.0



# The autocorr_0 is not normalized.
# To normalize, you need to divide by the mean firing rate
mean_fr_0 = len(neuron_0)/wake_ep.tot_length('s')
autocorr_0 = autocorr_0 / mean_fr_0

# Let's plot it
figure()
autocorr_0.plot()
show()

signal=autocorr_0.values
"""
FFT
"""

##Apply FFT to the continuous binarized data to obtain Frecuency components:
import scipy.fftpack as ft
signalX = scipy.fftpack.fft(signal[201:])
signalAmp=2*np.abs(np.sqrt(signalX))
freq=ft.fftfreq(200, d=0.0125)
i = freq>0
hz=freq[i]
hz = np.linspace(0,200/2,int(np.floor(400/2))) 
#Plots
plt.figure()
plt.plot(hz,signalAmp[0:len(hz)],'k')
#plt.xlim([2,30])
plt.xlabel('Frequency (Hz)')
plt.ylabel('Amplitude')
plt.title('Frequency domain')
plt.show()  

#power
signalPow=2*np.abs(signalX)**2/npnts
plt.plot(hz,signalPow[0:len(hz)],'k')
plt.xlim([3,30])
plt.xlabel('Frequency (Hz)')
plt.ylabel('Amplitude')
plt.title('Frequency domain')
plt.show()
